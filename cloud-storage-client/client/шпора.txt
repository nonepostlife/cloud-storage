Технология виртуализации - это разделение аппаратных ресурсов одного сервера между большим числом виртуальных машин (VPS-серверов)
Бывает программная и аппаратная В.

	Виртуальные машины — абстракция на уровне физического оборудования, превращает один сервер в несколько
На каждой виртуальной машине (ВМ) отдельная гостевая операционная система работает поверх операционной системы хоста с виртуализированным доступом к базовому оборудованию. Виртуальные машины с разными ОС могут работать на одном физическом сервере: ВМ UNIX может работать вместе с ВМ Linux и так далее. Микроядро и система виртуализации, которые создают и запускают виртуальные машины, называются гипервизорами или мониторами ВМ. Это то, что находится между оборудованием и ВМ и необходимо для виртуализации сервера, а также для изоляции операционных систем друг от друга.

Контейнер приложения — экземпляр исполняемого программного обеспечения (ПО), который объединяет двоичный код приложения вместе со всеми связанными файлами конфигурации, библиотеками, зависимостями и средой выполнения.

Контейнеры — абстракция на уровне приложения, объединяет код и зависимости
Контейнеры устанавливаются поверх физического сервера и его ОС, например Linux или Windows. Каждый контейнер отделяет свое содержимое от операционной системы. Контейнеры «легкие» — весят всего мегабайты и запускаются за секунды, ведь они берут лишь небольшую часть памяти при совместном использовании ОС.

Docker — это платформа для разработки и запуска контейнеров. Докер позволяет создавать контейнеры, автоматизирует их запуск и управляет жизненным циклом.

микросервисные архитектуры - подход к разработке программного обеспечения, когда приложение разбивается на небольшие автономные компоненты (микросервисы) с четко определенными интерфейсами
Ключевые преимущества микросервисов
- Простота развертывания - можно разворачивать только изменяющиеся микросервисы
- Оптимальность масштабирования - Можно расширять только те сервисы, которые в этом нуждаются, то есть сервисы с наименьшей производительностью, оставляя работать остальные части системы на менее мощном оборудовании.
- Устойчивость к сбоям - Отказ одного сервиса не приводит к остановке системы в целом.
- Возможность выбора технологий - оптимальных для решения задач стоящих перед сервисами.
- Небольшие команды разработки
- Уменьшение дублирования функциональностей
- Упрощение замены сервисов
- Независимость моделей данных.

ITIL - это методология управления, отладки и непрерывного улучшения бизнес-процессов, связанных с ИТ.
ITSM — подход к управлению и организации ИТ-услуг, направленный на удовлетворение потребностей бизнеса. Управление ИТ-услугами реализуется поставщиками ИТ-услуг путём использования оптимального сочетания людей, процессов и информационных технологий. Для содействия реализации подхода к управлению ИТ-услугами используется серия документов ITIL.
ITSM рекомендует сосредоточиться на клиенте и его потребностях, на услугах, предоставляемых пользователю информационными технологиями, а не на самих технологиях. При этом организация предоставления услуг и наличие заранее оговоренных в соглашениях об уровне услуг параметров эффективности (KPI) позволяет ИТ-отделам предоставлять качественные услуги, измерять и улучшать их качество. 

DevOps - это особый подход к организации команд разработки. Его суть в том, что разработчики, тестировщики и администраторы работают в едином потоке — не отвечают каждые за свой этап, а вместе работают над выходом продукта и стараются автоматизировать задачи своих отделов, чтобы код переходил между этапами без задержек. В DevOps ответственность за результат распределяется между всей командой.
6 этапов девопс.
1. Формулирование требований и проектирование
2. Разработка - Команда, обычно под руководством DevOps-инженера, создает среду и конвейер CI/CD, в которых будет происходить разработка продуктов. Для этого пишется ряд скриптов и систем для версирования, управления проектом, мониторинга, а также настраиваются кластеры для разработки, тестирования и продакшена. Параллельно с этим программисты работают непосредственно над кодом: пишут его, анализируют, контролируют версии. Обычно работу строят так, чтобы как можно быстрее выпускать отдельные готовые модули
3.Запуск конвейера CI/CD - запуск скриптов, превращающих код в продукт и берущих на себя рутину по тестированию и развертыванию
4. Непрерывное тестирование - автотесты. Если ошибки есть, код не уйдет в сборку и точно не попадет в работающий продукт.
5. Непрерывное развертывание - Когда конфигурации протестированы, автоматические скрипты сразу отправляют их развертываться на «боевых» серверах. Чтобы эта система работала, важно тщательное тестирование.
6. Непрерывный мониторинг - Когда приложение ушло на рабочий сервер, к нему подключаются системы мониторинга.

Agile - это итеративный подход к управлению проектами и разработке ПО, позволяющий командам ускорить доставку ценности клиентам и избежать лишней головной боли. Вместо того чтобы выпускать весь продукт целиком, agile-команда выполняет работу в рамках небольших, но удобных инкрементов. Требования, планы и результаты постоянно проходят проверку на актуальность, благодаря чему команды могут быстро реагировать на изменения.
Самый популярные подходы scrum и kanban
Основу Scrum составляют короткие итерации или спринты, как правило, 2-3-х недельные. Перед началом спринта команда сама формирует список фич на итерацию, далее запускается спринт. После окончания спринта выполненные фичи заливаются на продакшн, а невыполненные — переносятся в другой спринт. 
В отличие от методологии скрам, канбан скорее опирается на списки задач, чем на промежутки времени. Канбан позволяет управлять созданием многочисленных отчетных материалов, ориентируясь на рабочую загрузку и не перегружая отдельных участников команды. Обычно канбан предусматривает применение лекционной доски.

OpenShift -  это семейство программного обеспечения для контейнеризации, разработанное Red Hat. Его флагманским продуктом является OpenShift Container Platform - платформа в помещении как услуга, построенная на основе контейнеров Docker, оркестрованная и управляемая Kubernetes на основе Red Hat Enterprise Linux.

OpenJDK - 
    Техническое определение: JDK — это реализация спецификации платформы Java, включающая в себя компилятор и библиотеки классов.
    Обобщенное определение: JDK — это программный пакет, который вы загружаете для создания Java-приложений.

Spring Boot 2 - инструмент для настройки, развертывания и создания java приложений

Service Mesh (Istio) - – это конфигурируемый инфраструктурный уровень с низкой задержкой, который нужен для обработки большого объема сетевых межпроцессных коммуникаций между программными интерфейсами приложения (API). Service Mesh обеспечивает быструю, надёжную и безопасную коммуникацию между контейнеризированными и часто эфемерными сервисами инфраструктуры приложений. Service Mesh предоставляет такие возможности, как обнаружение сервисов, балансировку нагрузки, шифрование, прозрачность, трассируемость, аутентификацию и авторизацию, а также поддержку шаблона автоматического выключения (circuit breaker).
Service Mesh обычно реализуется путем предоставления каждому экземпляру сервиса экземпляра прокси, который называется Sidecar. Sidecar обрабатывают коммуникации между сервисами, производят мониторинг и устраняют проблемы безопасности, то есть все, что может быть абстрагировано от отдельных сервисов. Таким образом, разработчики могут писать, поддерживать и обслуживать код приложения в сервисах, а системные администраторы могут работать с Service Mesh и запускать приложение.

Jaegger - кое-как можно найти jaggaer (бывший SciQuest)

REST API
Application Programming Interface (API), или программный интерфейс приложения — это набор инструментов, который позволяет одним программам работать с другими. API предусматривает, что программы могут работать в том числе и на разных компьютерах. 
REST API позволяет использовать для общения между программами протокол HTTP (зашифрованная версия — HTTPS), с помощью которого мы получаем и отправляем большую часть информации в интернете.
В API-системе четыре классических метода:
    GET — метод чтения информации. GET-запросы всегда только возвращают данные с сервера, и никогда их не меняют и не удаляют. В бухгалтерском приложении GET /invoices вы открываете список всех счетов.
    POST — создание новых записей. В нашем приложении POST /invoices используется, когда вы создаете новый счет на оплату.
    PUT — редактирование записей. Например, PUT /invoices вы исправляете номер счета, сумму или корректируете реквизиты.
    DELETE — удаление записей. В нашем приложении DELETE /invoices удаляет старые счета, которые контрагенты уже оплатили.

Чаще всего REST API применяют:
    Для связи мобильных приложений с серверными.
    Для построения микросервисных серверных приложений. Это архитектурный подход, при котором большие приложения разбиваются на много маленьких частей.
    Для предоставления доступа к программам сторонних разработчиков. Например, Stripe API позволяет программистам встраивать обработку платежей в свои приложения.


Kafka - брокер сообщений 

IIS - (Internet Information Services) — программное обеспечение для развертывания веб-сервера. Входит в состав Windows. Основным компонентом IIS является веб-сервер, который позволяет размещать в Интернете сайты. IIS поддерживает протоколы HTTP, HTTPS, FTP, POP3, SMTP, NNTP. 

Apache Tomcat
сервлет - это серверная технология, которая помогает обрабатывать http-запросы и ответы клиента
Apache tomcat может быть определен как веб-сервер (который также называется веб-контейнером / контейнером сервлетов), который обрабатывает сервлеты, JSP (путем внутреннего преобразования вашего JSP в сервлеты внутри), а также отображает JSP.
Tomcat широко используется веб-разработчиками при разработке веб-приложений. С точки зрения высокого уровня, Apache Tomcat отвечает за обеспечение среды выполнения для сервлетов. Это обеспечивает среду, в которой можно запустить их Java-код.
В более подробном аспекте tomcat отвечает за:
    Слушайте все входящие запросы от клиентов.
    Загрузите соответствующие классы сервлетов, используя сопоставления сервлетов (из файла web.xml) для обработки входящих клиентских запросов.
    Выполните класс сервлета и.
    Наконец, выгрузите класс сервлета.
С момента, когда класс сервлета загружается, до точки, в которой он выгружен, сервлет отвечает за обработку клиентского запроса, выполняя различные методы его жизненного цикла и предоставляя необходимый ответ обратно tomcat в виде страниц JSP. Затем Tomcat возвращает ответ клиенту, отрисовывая JSP.
Жизненный цикл сервлета состоит из трех основных методов:
1) init () : этот метод используется для инициализации сервлета. Сервлет инициализируется только один раз, либо при запуске сервера, либо при его вызове клиентом с использованием соответствующего URL-адреса.
2) service () : после создания экземпляра сервлета tomcat вызывает метод обслуживания сервлета. Сервисный метод отвечает за генерацию ответа на входящий запрос, переданный ему tomcat. Этот метод вызывает другие ресурсы на стороне сервера, необходимые для извлечения данных из базы данных и предоставления ответа обратно tomcat.
3) destroy () : метод уничтожения вызывается tomcat в конце для всех действий, связанных с очисткой, таких как закрытие соединений с базой данных, освобождение ресурсов для сбора мусора и т. Д.
 
JBoss (WildFly), nginx, Weblogic - веб сервера

bash - скриптовый язык программирования
1. Любой bash-скрипт должен начинаться со строки:
#!/bin/bash
в этой строке после #! указывается путь к bash-интерпретатору, поэтому если он у вас установлен в другом месте(где, вы можете узнать набрав whereis bash) поменяйте её на ваш путь.
2. Коментарии начинаются с символа # (кроме первой строки).
3. В bash переменные не имеют типа(о них речь пойдет ниже)

